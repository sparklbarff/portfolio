/* 
 * Optimized CRT/VHS Effects CSS
 * Consolidated layer-based approach for improved performance
 */

/* CSS Variables for effect configuration */
:root {
  /* Base display settings */
  --crt-width: 100vw;
  --crt-height: 100vh;
  
  /* Performance mode indicators - changed by JS */
  --perf-level: 'high'; /* Can be 'high', 'medium', 'low' */
  
  /* Scanline settings */
  --scanline-opacity: 0.7;
  --scanline-size: 2px;
  --scanline-drift-speed: 4000ms;
  
  /* Barrel distortion */
  --barrel-strength: 0.6;
  
  /* RGB separation */
  --rgb-offset: 1.5px;
  --rgb-opacity: 0.4;
  
  /* Tracking errors */
  --tracking-intensity: 0.5;
  --tracking-speed: 400ms;
  
  /* Chroma bleed */
  --chroma-spread: 1.2px;
  --chroma-saturation: 1.1;
  
  /* Vignette */
  --vignette-size: 120%;
  --vignette-opacity: 0.8;
  
  /* Phosphor persistence */
  --persistence-trail: 3;
  --persistence-opacity: 0.5;
  
  /* Enable/disable specific effects */
  --effect-scanlines: 1;
  --effect-barrel-distortion: 1;
  --effect-rgb-separation: 1;
  --effect-tracking-errors: 1;
  --effect-chroma-bleed: 1;
  --effect-vignette: 1;
  --effect-phosphor-persistence: 1;
}

/* Base layer for structural effects (barrel distortion, etc.) */
.crt-base-layer {
  position: fixed;
  inset: 0;
  z-index: 1;
  pointer-events: none;
  will-change: transform, filter;
  transform: translateZ(0);
}

/* Content layer for effects that interact with the page content */
.crt-content-layer {
  position: fixed;
  inset: 0;
  z-index: 20;
  pointer-events: none;
  will-change: transform, opacity;
  transform: translateZ(0);
}

/* Overlay layer for effects placed on top of content */
.crt-overlay-layer {
  position: fixed;
  inset: 0;
  z-index: 30;
  pointer-events: none;
  mix-blend-mode: overlay;
  will-change: opacity;
  transform: translateZ(0);
}

/* Filter layer for color/brightness effects */
.crt-filter-layer {
  position: fixed;
  inset: 0;
  z-index: 40;
  pointer-events: none;
  mix-blend-mode: screen;
  will-change: filter;
  transform: translateZ(0);
}

/* ===== INDIVIDUAL EFFECT STYLES ===== */

/* Barrel Distortion - Applied to base layer */
.crt-base-layer[data-active-effects~="barrelDistortion"] {
  /* Subtle screen curvature using CSS transforms */
  transform: perspective(2000px) rotateY(0.8deg) rotateX(-0.4deg) scale(calc(1 - (var(--barrel-strength) * 0.01)));
  transform-origin: center center;
  transform-style: preserve-3d;

  /* Enhanced backdrop filtering for tube simulation */
  backdrop-filter: contrast(calc(1 + (var(--barrel-strength) * 0.05))) 
                   brightness(calc(1 + (var(--barrel-strength) * 0.01))) 
                   hue-rotate(calc(var(--barrel-strength) * 0.5deg))
                   blur(calc(var(--barrel-strength) * 0.15px));
  -webkit-backdrop-filter: contrast(calc(1 + (var(--barrel-strength) * 0.05))) 
                          brightness(calc(1 + (var(--barrel-strength) * 0.01))) 
                          hue-rotate(calc(var(--barrel-strength) * 0.5deg))
                          blur(calc(var(--barrel-strength) * 0.15px));

  /* Subtle pincushion distortion via SVG filter */
  filter: url(#crt-barrel-distortion);

  /* Hardware acceleration */
  will-change: transform, filter;
  transform: translateZ(0);
  
  /* Subtle animation for living CRT feel */
  animation: crtGeometryVariation 45s ease-in-out infinite;
}

/* Scanlines - Applied to overlay layer */
.crt-overlay-layer[data-active-effects~="scanlines"] {
  /* Create scanline pattern with CSS gradients */
  background-image: 
    /* Primary scanlines with curvature simulation */ 
    repeating-linear-gradient(
      0deg,
      rgba(0, 0, 0, calc(var(--scanline-opacity) * 0.9)) 0px,
      rgba(0, 0, 0, calc(var(--scanline-opacity) * 0.8)) calc(var(--scanline-size) * 0.3),
      rgba(0, 0, 0, calc(var(--scanline-opacity) * 0.5)) calc(var(--scanline-size) * 0.6),
      rgba(0, 0, 0, calc(var(--scanline-opacity) * 0.8)) calc(var(--scanline-size) * 0.9),
      rgba(0, 0, 0, calc(var(--scanline-opacity) * 0.4)) var(--scanline-size)
    ),
    /* Subtle intensity variation pattern */
    repeating-linear-gradient(
      90deg,
      transparent 0px,
      rgba(0, 0, 0, calc(var(--scanline-opacity) * 0.3)) 20px,
      transparent 40px,
      rgba(0, 0, 0, calc(var(--scanline-opacity) * 0.35)) 60px,
      transparent 80px
    );
  
  /* Curved masking to simulate authentic CRT scanline bowing */
  clip-path: ellipse(55% 53% at center);
  
  /* Hardware acceleration */
  will-change: opacity;
  transform: translateZ(0);
  
  /* Blend mode for better integration with content */
  mix-blend-mode: overlay;
  
  /* Animation for living scanline effect */
  animation: scanlineFlicker 3s steps(3) infinite,
             scanlineIntensityVar 8s ease-in-out infinite,
             scanlineCurvature 20s ease-in-out infinite;
}

/* RGB Separation - Applied to filter layer */
.crt-filter-layer[data-active-effects~="rgbSeparation"] {
  position: fixed;
  inset: 0;
  mix-blend-mode: screen;
  opacity: var(--rgb-opacity);
  pointer-events: none;
  
  /* Create RGB shadow effect */
  backdrop-filter: 
    drop-shadow(calc(var(--rgb-offset) * -1) 0 0 rgba(255, 0, 0, 0.7))
    drop-shadow(var(--rgb-offset) 0 0 rgba(0, 0, 255, 0.7));
  -webkit-backdrop-filter: 
    drop-shadow(calc(var(--rgb-offset) * -1) 0 0 rgba(255, 0, 0, 0.7))
    drop-shadow(var(--rgb-offset) 0 0 rgba(0, 0, 255, 0.7));
  
  /* Hardware acceleration */
  will-change: backdrop-filter;
  transform: translateZ(0);
  
  /* Animation for dynamic RGB convergence errors */
  animation: rgbConvergenceError 7s ease-in-out infinite alternate;
}

/* Vignette - Applied to overlay layer */
.crt-overlay-layer[data-active-effects~="vignette"] {
  background: 
    /* Corner darkening (CRT shadow mask effect) */ 
    radial-gradient(
      ellipse 130% 120% at 15% 15%,
      rgba(0, 0, 0, calc(var(--vignette-opacity) * 0.3)),
      transparent 45%
    ),
    radial-gradient(
      ellipse 130% 120% at 85% 15%,
      rgba(0, 0, 0, calc(var(--vignette-opacity) * 0.3)),
      transparent 45%
    ),
    radial-gradient(
      ellipse 130% 120% at 15% 85%,
      rgba(0, 0, 0, calc(var(--vignette-opacity) * 0.3)),
      transparent 45%
    ),
    radial-gradient(
      ellipse 130% 120% at 85% 85%,
      rgba(0, 0, 0, calc(var(--vignette-opacity) * 0.3)),
      transparent 45%
    ),
    /* Main vignette with realistic falloff */
    radial-gradient(
      ellipse var(--vignette-size) var(--vignette-size) at 50% 50%,
      rgba(0, 0, 0, 0) 20%,
      rgba(0, 0, 0, calc(var(--vignette-opacity) * 0.15)) 60%,
      rgba(0, 0, 0, calc(var(--vignette-opacity) * 0.35)) 85%,
      rgba(0, 0, 0, calc(var(--vignette-opacity) * 0.6)) 100%
    ),
    /* Edge brightening (CRT phosphor edge glow) */
    radial-gradient(
      ellipse 88% 82% at 50% 50%,
      rgba(255, 255, 255, 0) 70%,
      rgba(255, 255, 255, 0.02) 85%,
      rgba(255, 255, 255, 0.04) 95%
    );
  
  mix-blend-mode: multiply;
  opacity: var(--vignette-opacity);
  
  /* Hardware acceleration */
  will-change: opacity;
  transform: translateZ(0);
}

/* Chroma Bleed - Applied to filter layer */
.crt-filter-layer[data-active-effects~="chromaBleed"] {
  filter: url(#vhs-chroma-bleed);
  opacity: var(--chroma-saturation);
  
  /* Hardware acceleration */
  will-change: filter;
  transform: translateZ(0);
}

/* Tracking Error - Applied to content layer */
.crt-content-layer[data-active-effects~="trackingErrors"] {
  animation: trackingError var(--tracking-speed) ease-out forwards;
}

/* ===== ANIMATION KEYFRAMES ===== */

/* Barrel distortion subtle movement */
@keyframes crtGeometryVariation {
  0%, 100% {
    transform: perspective(2000px) rotateY(0.8deg) rotateX(-0.4deg) scale(calc(1 - (var(--barrel-strength) * 0.01)));
  }
  25% {
    transform: perspective(2100px) rotateY(0.7deg) rotateX(-0.3deg) scale(calc(1 - (var(--barrel-strength) * 0.009)));
  }
  50% {
    transform: perspective(1950px) rotateY(0.9deg) rotateX(-0.5deg) scale(calc(1 - (var(--barrel-strength) * 0.012)));
  }
  75% {
    transform: perspective(2050px) rotateY(0.6deg) rotateX(-0.2deg) scale(calc(1 - (var(--barrel-strength) * 0.008)));
  }
}

/* Scanline flicker animation */
@keyframes scanlineFlicker {
  0%, 100% {
    opacity: 1;
  }
  25% {
    opacity: 0.9;
  }
  50% {
    opacity: 0.95;
  }
  75% {
    opacity: 0.92;
  }
}

/* Scanline intensity variation */
@keyframes scanlineIntensityVar {
  0%, 100% {
    filter: contrast(1.2) brightness(1);
  }
  33% {
    filter: contrast(1.4) brightness(0.95);
  }
  66% {
    filter: contrast(1.3) brightness(0.98);
  }
}

/* Scanline curvature animation */
@keyframes scanlineCurvature {
  0%, 100% {
    transform: translateZ(0) scaleY(1);
  }
  25% {
    transform: translateZ(0) scaleY(1.001) skewY(0.02deg);
  }
  50% {
    transform: translateZ(0) scaleY(0.999) skewY(-0.01deg);
  }
  75% {
    transform: translateZ(0) scaleY(1.0005) skewY(0.015deg);
  }
}

/* RGB Convergence error animation */
@keyframes rgbConvergenceError {
  0%, 100% {
    backdrop-filter: 
      drop-shadow(calc(var(--rgb-offset) * -1) 0 0 rgba(255, 0, 0, 0.7))
      drop-shadow(var(--rgb-offset) 0 0 rgba(0, 0, 255, 0.7));
    -webkit-backdrop-filter: 
      drop-shadow(calc(var(--rgb-offset) * -1) 0 0 rgba(255, 0, 0, 0.7))
      drop-shadow(var(--rgb-offset) 0 0 rgba(0, 0, 255, 0.7));
  }
  25% {
    backdrop-filter: 
      drop-shadow(calc(var(--rgb-offset) * -0.8) calc(var(--rgb-offset) * 0.2) 0 rgba(255, 0, 0, 0.6))
      drop-shadow(calc(var(--rgb-offset) * 0.8) calc(var(--rgb-offset) * 0.1) 0 rgba(0, 0, 255, 0.6));
    -webkit-backdrop-filter: 
      drop-shadow(calc(var(--rgb-offset) * -0.8) calc(var(--rgb-offset) * 0.2) 0 rgba(255, 0, 0, 0.6))
      drop-shadow(calc(var(--rgb-offset) * 0.8) calc(var(--rgb-offset) * 0.1) 0 rgba(0, 0, 255, 0.6));
  }
  50% {
    backdrop-filter: 
      drop-shadow(calc(var(--rgb-offset) * -1.2) calc(var(--rgb-offset) * -0.1) 0 rgba(255, 0, 0, 0.8))
      drop-shadow(calc(var(--rgb-offset) * 1.2) calc(var(--rgb-offset) * -0.2) 0 rgba(0, 0, 255, 0.8));
    -webkit-backdrop-filter: 
      drop-shadow(calc(var(--rgb-offset) * -1.2) calc(var(--rgb-offset) * -0.1) 0 rgba(255, 0, 0, 0.8))
      drop-shadow(calc(var(--rgb-offset) * 1.2) calc(var(--rgb-offset) * -0.2) 0 rgba(0, 0, 255, 0.8));
  }
  75% {
    backdrop-filter: 
      drop-shadow(calc(var(--rgb-offset) * -0.9) calc(var(--rgb-offset) * -0.2) 0 rgba(255, 0, 0, 0.7))
      drop-shadow(calc(var(--rgb-offset) * 0.9) calc(var(--rgb-offset) * -0.1) 0 rgba(0, 0, 255, 0.7));
    -webkit-backdrop-filter: 
      drop-shadow(calc(var(--rgb-offset) * -0.9) calc(var(--rgb-offset) * -0.2) 0 rgba(255, 0, 0, 0.7))
      drop-shadow(calc(var(--rgb-offset) * 0.9) calc(var(--rgb-offset) * -0.1) 0 rgba(0, 0, 255, 0.7));
  }
}

/* Tracking error animation */
@keyframes trackingError {
  0% {
    transform: translateY(0);
    filter: brightness(1);
  }
  10% {
    transform: translateY(calc(var(--tracking-intensity) * -20px));
    filter: brightness(1.4);
  }
  20% {
    transform: translateY(calc(var(--tracking-intensity) * 15px));
    filter: brightness(0.8);
  }
  30% {
    transform: translateY(calc(var(--tracking-intensity) * -10px));
    filter: brightness(1.2);
  }
  40% {
    transform: translateY(calc(var(--tracking-intensity) * 5px));
    filter: brightness(0.9);
  }
  50% {
    transform: translateY(calc(var(--tracking-intensity) * -2px));
    filter: brightness(1.1);
  }
  60% {
    transform: translateY(0);
    filter: brightness(1);
  }
  100% {
    transform: translateY(0);
    filter: brightness(1);
  }
}

/* ===== PERFORMANCE ADAPTATIONS ===== */

/* Low performance mode - reduce effects */
.perf-low .crt-overlay-layer,
.perf-low .crt-filter-layer {
  animation-duration: calc(var(--anim-medium) * 3) !important;
  transition-duration: calc(var(--anim-fast) * 2) !important;
}

.perf-low .crt-base-layer {
  /* Simplify barrel distortion */
  transform: perspective(2000px) scale(0.99) !important;
  filter: none !important;
  backdrop-filter: none !important;
  -webkit-backdrop-filter: none !important;
}

/* Medium performance mode - simplify some effects */
.perf-medium .crt-overlay-layer,
.perf-medium .crt-filter-layer {
  animation-duration: calc(var(--anim-medium) * 1.5) !important;
  transition-duration: calc(var(--anim-fast) * 1.3) !important;
}

/* Reduced motion preferences */
@media (prefers-reduced-motion: reduce) {
  .crt-base-layer,
  .crt-content-layer,
  .crt-overlay-layer,
  .crt-filter-layer {
    animation-duration: 0.01ms !important;
    animation-iteration-count: 1 !important;
    transition-duration: 0.01ms !important;
  }
}
